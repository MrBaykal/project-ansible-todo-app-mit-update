- name: install Docker
  hosts: _development
  become: true
  tasks: 
    - name: upgrade all packages
      ansible.builtin.yum: 
        name: '*'
        state: latest
    # we may need to uninstall any existing docker files from the centos repo first. 
    - name: Uninstall old versions of Docker
      ansible.builtin.yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: absent
      ignore_errors: yes  # Önceden yüklü değilse hata mesajlarını yok say

    - name: Install yum-utils package
      ansible.builtin.yum:
        name: yum-utils
        state: present

    - name: Set up the Docker repository
      ansible.builtin.command:
        cmd: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: Install Docker Engine and dependencies
      ansible.builtin.yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Add user ec2-user to docker group
      ansible.builtin.user:
        name: ec2-user
        groups: docker
        append: yes
        
    - name: Start Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

- name: configure postgresql instance
  hosts: _ansible_postgresql
  become: true
  vars_files: 
    - secret.yml
  vars:
    container_path: /home/ec2-user/postgresql
    container_name: cw_postgre
    image_name: clarusway/postgre
  tasks:
    - name: copy files to the postgresql node
      ansible.builtin.copy:
        src: /home/ec2-user/ansible/ansible-project/postgres/
        dest: "{{ container_path }}"

    - name: remove {{ container_name }} container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: true                     

    - name: remove {{ image_name }} image
      community.docker.docker_image:
        name: "{{ image_name }}" 
        state: absent
        force_absent: true        

    - name: build container image
      community.docker.docker_image:
        name: "{{ image_name }}" 
        build:
          path: "{{ container_path }}"
        source: build
        state: present
      register: image_info        

    - name: print the image info
      ansible.builtin.debug:
        var: image_info

    - name: Launch postgresql docker container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        ports: 
        - "5432:5432"
        env:
          POSTGRES_PASSWORD: "{{ password }}"
        volumes:
          - /db-data:/var/lib/postgresql/data
      register: container_info
    
    - name: print the container info
      ansible.builtin.debug:
        var: container_info

- name: configure nodejs instance
  hosts: _ansible_nodejs
  become: true
  vars:
    container_path: /home/ec2-user/nodejs/
    container_name: cw_nodejs
    image_name: clarusway/nodejs
    user: ec2-user        
  tasks:
    - name: Copy files to the Node.js node
      ansible.builtin.copy:
        src: /home/ec2-user/ansible/ansible-project/node.js/
        dest: "{{ container_path }}"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0755'

  # Remove the container if it exists
    - name: Remove {{ container_name }} container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: true

  # Remove the image if it exists
    - name: Remove {{ image_name }} image
      community.docker.docker_image:
        name: "{{ image_name }}"
        state: absent

    - name: Check for Dockerfile existence
      ansible.builtin.command: ls /home/ec2-user/nodejs/Dockerfile
      register: dockerfile_check
      failed_when: dockerfile_check.rc != 0

    - name: Build the container image
      community.docker.docker_image:
        name: "{{ image_name }}" 
        build:
          path: "{{ container_path }}"  # Ensure this path is correct and contains the Dockerfile
        source: build
        state: present
      register: image_info

    - name: Print the image info
      ansible.builtin.debug:
        var: image_info

    - name: Launch Node.js Docker container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}" 
        state: started
        ports: 
        - "5000:5000"
      register: container_info

    - name: Print the container info
      ansible.builtin.debug:
        var: container_info  

- name: configure react instance
  hosts: _ansible_react
  become: true
  vars:
    container_path: /home/ec2-user/react
    container_name: cla_react
    image_name: clarusway/react
  tasks:
    - name: copy files to the react node
      copy:
        src: /home/ec2-user/ansible/ansible-project/react/
        dest: "{{ container_path }}"

    - name: remove {{ container_name }} container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: true

    - name: Forcefully {{ image_name }} image
      community.docker.docker_image:
        name: "{{ image_name }}" 
        state: absent
        force_absent: yes
  
    - name: build container image
      community.docker.docker_image:
        name: "{{ image_name }}" 
        build:
          path: "{{ container_path }}"
        source: build
        state: present

    - name: Launch react docker container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        ports: 
        - "3000:3000"
      register: container_info
    
    - name: print the container info
      debug:
        var: container_info            
